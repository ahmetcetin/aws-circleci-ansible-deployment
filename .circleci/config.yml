version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      WorkflowID:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeopleBackend-<<parameters.WorkflowID>>
            aws cloudformation delete-stack --stack-name udapeopleFrontend-<<parameters.WorkflowID>>
            aws s3 rb s3://udapeople-<<parameters.WorkflowID>> --force

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      WorkflowID:
        type: string
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl -H "token: <<parameters.WorkflowID>>" --request GET https://api.memstash.io/values/migration)
            if(( $SUCCESS==1 ));
            then
              cd ~/project/backend
              npm install
              npm run migrations:revert
            fi

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Install front-end deps
          command: |
            cd frontend && npm install
      - run:
          name: Build front-end
          command: |
            cd frontend && npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build-new

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Install back-end deps
          command: |
            cd backend && npm install
      - run:
          name: Back-end build
          command: |
            cd backend && npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build-new]
      - run:
          name: Front-end test
          command: |
            cd frontend && npm run test

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end test
          command: |
            cd backend && npm run test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build-new]
      - run:
          name: Front-end test
          command: |
            cd frontend &&  npm audit fix --audit-level=critical --force
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build-scanned

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end test
          command: |
            cd backend && npm audit fix --audit-level=critical --force
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build-scanned

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeopleBackend-${CIRCLE_WORKFLOW_ID:0:8}" \
              --parameter-overrides \
                  ID="${CIRCLE_WORKFLOW_ID:0:8}" \
                  TYPEORMCONNECTION=${TYPEORM_CONNECTION} \
                  TYPEORMDATABASE=${TYPEORM_DATABASE} \
                  TYPEORMENTITIES=${TYPEORM_ENTITIES} \
                  TYPEORMMIGRATIONS=${TYPEORM_MIGRATIONS} \
                  TYPEORMMIGRATIONSDIR=${TYPEORM_MIGRATIONS_DIR} \
                  TYPEORMHOST=${TYPEORM_HOST} \
                  TYPEORMPORT=${TYPEORM_PORT} \
                  TYPEORMUSERNAME=${TYPEORM_USERNAME} \
                  TYPEORMPASSWORD=${TYPEORM_PASSWORD}

            BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=udapeopleBackend-${CIRCLE_WORKFLOW_ID:0:8}" \
              --output text)

            echo "TypeORM Host: "
            echo ${TYPEORM_HOST}
            echo "CircleCI Workflow ID: "
            echo ${CIRCLE_WORKFLOW_ID}
            echo "Backend IP: "
            echo ${BACKEND_IP}

            curl -H "Content-Type: text/plain" \
               -H "token: ${CIRCLE_WORKFLOW_ID}" \
               --request PUT \
               --data "${BACKEND_IP}" \
               https://api.memstash.io/values/backendip
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeopleFrontend-${CIRCLE_WORKFLOW_ID:0:8}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:8}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            yum install tar gzip -y
            cd .circleci/ansible/
            echo "[server]" > ./inventory.txt
            curl -H "token: ${CIRCLE_WORKFLOW_ID}" --request GET https://api.memstash.io/values/backendip >> ./inventory.txt
            cat ./inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment:
          WorkflowID: "${CIRCLE_WORKFLOW_ID:0:8}"

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: [8c:21:6e:cf:b1:78:40:35:15:8a:e9:08:4e:a9:47:ee]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update --allow-untrusted ansible
            pip install awscli
      - run:
          name: Configure server
          no_output_timeout: 10m
          command: |
            cd .circleci/ansible/
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment:
          WorkflowID: "${CIRCLE_WORKFLOW_ID:0:8}"

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            sudo apt-get -y -q update
            sudo apt-get -y -q install python3 awscli
      - restore_cache:
          keys: [backend-build-scanned]
      - run:
          name: Run migrations
          command: |
            cd backend
            npm run migrations > migration_${CIRCLE_WORKFLOW_ID:0:8}.txt
            cat migration_${CIRCLE_WORKFLOW_ID:0:8}.txt
      - run:
          name: Send migration results to memstash
          command: |
            cd backend
            SUCCESS=0

            if grep -q "has been executed successfully" migration_${CIRCLE_WORKFLOW_ID:0:}.txt
            then
              SUCCESS=1
            fi

            curl -H "Content-Type: text/plain" \
              -H "token: ${CIRCLE_WORKFLOW_ID}" \
              --request PUT \
              --data ${SUCCESS} https://api.memstash.io/values/migration

      - destroy-environment:
          WorkflowID: "${CIRCLE_WORKFLOW_ID:0:8}"
      - revert-migrations:
          WorkflowID: "${CIRCLE_WORKFLOW_ID}"


  deploy-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            sudo apt-get -y -q update
            sudo apt-get -y -q install python3
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Get backend url & build
          command: |
            BACKEND_IP=$(curl -H "token: ${CIRCLE_WORKFLOW_ID}" --request GET https://api.memstash.io/values/backendip)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            cd frontend
            npm install
            echo "API_URL=$API_URL" >> .env
            npm run build:prod
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend/dist
            aws s3 sync . s3://udapeople-${CIRCLE_WORKFLOW_ID:0:8}

      - destroy-environment:
          WorkflowID: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          WorkflowID: "${CIRCLE_WORKFLOW_ID}"

  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: [8c:21:6e:cf:b1:78:40:35:15:8a:e9:08:4e:a9:47:ee]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update --allow-untrusted tar gzip ansible nodejs npm
            pip install awscli
      - run:
          name: Deploy backend
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt deploy-backend.yml

      - destroy-environment:
          WorkflowID: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          WorkflowID: "${CIRCLE_WORKFLOW_ID}"

  # smoke-test:
  #   docker:
  #     # Lightweight Docker image
  #   steps:
  #     # Checkout code from git
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           # your code here
  #     - run:
  #         name: Get backend url
  #         command: |
  #           # your code here
  #     - run:
  #         name: Backend smoke test.
  #         command: |
  #           # your code here
  #     - run:
  #         name: Frontend smoke test.
  #         command: |
  #           # your code here
  #     # Here's where you will add some code to rollback on failure

  # cloudfront-update:
  #   docker:
  #     # Docker image here that supports AWS CLI
  #   steps:
  #     # Checkout code from git
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           # your code here
  #     - run:
  #         name: Update cloudfront distribution
  #         command: |
  #           # your code here
  #     # Here's where you will add some code to rollback on failure

  # cleanup:
  #   docker:
  #     # Docker image here
  #   steps:
  #     # Checkout code from git
  #     - run:
  #         name: Get old stack workflow id
  #         command: |
  #           # your code here
  #           export OldWorkflowID="the id here"
  #           export STACKS=[] #put the list of stacks here
  #     - run:
  #         name: Remove old stacks and files
  #         command: |
  #           if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
  #           then
  #             # your code here
  #           fi


workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [test-backend]
      - scan-frontend:
          requires: [test-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      # - deploy-backend:
      #     requires: [run-migrations]
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]
